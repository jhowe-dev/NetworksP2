Script started on Wed 03 May 2017 05:28:33 PM EDT
]0;szosy@n541la: ~/dev/NetworksP2szosy@n541la:~/dev/NetworksP2$ ls -l
total 80
-rw-r--r-- 1 szosy szosy  4096 May  3 17:28 CLIENT_SCRIPT.txt
-rw-r--r-- 1 szosy szosy   248 Apr 30 15:28 Makefile
-rwxr-xr-x 1 szosy szosy 12496 May  3 17:28 [0m[01;32mnonblock-udpclient[0m
-rw-r--r-- 1 szosy szosy  9651 May  3 17:20 nonblock-udpclient.c
-rw-r--r-- 1 szosy szosy     0 May  3 17:28 SERVER_SCRIPT.txt
-rw-r--r-- 1 szosy szosy  1757 May  1 20:01 test1.txt
-rw-r--r-- 1 szosy szosy  3414 Apr 30 16:00 test2.txt
-rwxr-xr-x 1 szosy szosy 11560 May  3 17:28 [01;32mudpserver[0m
-rw-r--r-- 1 szosy szosy  5630 May  2 17:03 udpserver.c
-rw-r--r-- 1 szosy szosy  2865 May  3 17:20 udpserver_utility.h
]0;szosy@n541la: ~/dev/NetworksP2szosy@n541la:~/dev/NetworksP2$ cat test2.txt
\begin{center}
{\bf PROGRAMMING PROJECT 2\\ }
\end{center}

%\vspace{0.3in}
\noindent

In this project, you will implement a Transport Layer protocol
to transmit data from a Sender to a Receiver in the presence of
errors and packet loss. The protocol to be implemented by you
is the Stop-and-Wait protocol. The protocol will be
unidirectional in which data is sent in one direction only
with acknowledgments being sent in the reverse direction.
Only positive ACKs are used. The transmission of packets
and ACKs will be done over UDP (that represents an unreliable
network layer channel) using fixed UDP ports.


To implement this protocol, you will write two separate
programs called {\em Sender} and {\em Receiver} which
represent the actions to be executed by the sending node and
the receiving node respectively. Both the Sender and the
Receiver must run on the host {\em cis450.cis.udel.edu},
but they should be written in such a way that they could
conceivably be run on any two hosts, not necessarily the same.

\begin{verbatim}
    <----------------- 16 bits (2 bytes) ------------------>
    --------------------------------------------------------
    |              Count (no. of data bytes)               |
    --------------------------------------------------------
    |                Packet Sequence Number                |
    --------------------------------------------------------
    |            Data Bytes      |          ...            |
    --------------------------------------------------------
\end{verbatim}

The second field of the header is called the
packet sequence number. Each
packet transmitted by the Sender is assigned
a sequence number that alternates between 0 and 1,
in accordance with the Stop-and-Wait protocol.


Output of your program

At specific places in both your Sender and Receiver programs, you must print 
out specific messages.
The symbol ‚Äún‚Äù below refers to the sequence number of the transmitted or receiv
0 or 1), and the symbol ‚Äúc‚Äù below refers to the count (number of data bytes) in
 the transmitted or
received packet.
The messages to be printed by the Sender are:
When a new data packet numbered n is sent by the Sender:
Packet n transmitted with c data bytes
When a data packet numbered n is retransmitted by the Sender:
Packet n retransmitted with c data bytes
When a timeout expires:
Timeout expired for packet numbered n
When an ACK is received with number n:
ACK n received
When the ‚ÄúEnd of Transmission‚Äù packet is sent:
End of Transmission Packet with sequence number n transmitted with c data bytes

\begin{center}
{\bf Testing}
\end{center}

The files {\em test1.txt} and {\em test2.txt} in the directory
{\em /usa/sethi/networks/proj1} on {\em cis450.cis.udel.edu}
are sample input files that may
be used by you to test your programs.
It is strongly suggested that you first use {\em test1.txt} for
all your testing, and only if you have thoroughly debugged your
programs, then proceed with using {\em test2.txt} for further testing.

It is also suggested that you test your programs in phases using
the following configuration parameter values:

\begin{itemize}
\item Packet and ACK loss rates 0, Timeout value $n$  = 5.
\item Packet loss rate 0.2, ACK loss rate 0, Timeout value
$n$ = 5.
\item Packet loss rate 0, ACK loss rate 0.2, Timeout value
$n$ = 5.
\item Packet and ACK loss rates 0, Timeout value $n$ = 3.
\end{itemize}

]0;szosy@n541la: ~/dev/NetworksP2szosy@n541la:~/dev/NetworksP2$ ./udpserver 
What should the packet loss rate be?
0
What should the ACK loss rate be?
0
---------------------------------------------------
Waiting for incoming messages on port 65100

Packet 0 recieved with 15 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 31 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 13 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 01 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 16 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 10 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 01 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 63 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 64 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 62 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 52 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 59 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 58 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 57 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 62 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 46 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 01 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 01 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 56 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 54 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 61 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 57 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 57 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 57 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 63 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 01 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 17 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 61 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 61 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 61 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 61 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 61 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 61 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 61 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 61 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 15 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 01 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 45 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 29 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 45 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 51 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 47 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 01 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 01 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 23 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 01 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 78 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 23 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 79 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 05 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 79 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 05 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 20 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 17 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 46 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 57 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 39 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 62 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 41 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 24 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 38 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 39 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 15 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 51 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 79 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 01 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 01 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 15 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 14 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 13 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 01 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 63 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 61 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 32 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 38 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 64 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 64 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 71 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 01 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 65 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 46 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 01 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 16 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 59 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 59 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 09 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 59 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 09 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 58 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 14 data bytes
ACK 1 generated
ACK 1 transmitted
---------------------------------------------------
Packet 0 recieved with 01 data bytes
ACK 0 generated
ACK 0 transmitted
---------------------------------------------------
Packet 1 recieved with 00 data bytes
End of Transmission Packet with Sequence Number 1 recieved with 00 data bytes
---------------------------------------------------
Total Recieved Packets : 91
Successful Recieved Packets : 91
Duplicate Packets : 0
Data Bytes received : 3414
Lost Packets : 0
ACKS Generated : 91
ACKS Lost : 0
ACKS Generated Without Loss : 91
Total Time : 0
---------------------------------------------------
]0;szosy@n541la: ~/dev/NetworksP2szosy@n541la:~/dev/NetworksP2$ cat out.txt 
\begin{center}
{\bf PROGRAMMING PROJECT 2\\ }
\end{center}

%\vspace{0.3in}
\noindent

In this project, you will implement a Transport Layer protocol
to transmit data from a Sender to a Receiver in the presence of
errors and packet loss. The protocol to be implemented by you
is the Stop-and-Wait protocol. The protocol will be
unidirectional in which data is sent in one direction only
with acknowledgments being sent in the reverse direction.
Only positive ACKs are used. The transmission of packets
and ACKs will be done over UDP (that represents an unreliable
network layer channel) using fixed UDP ports.


To implement this protocol, you will write two separate
programs called {\em Sender} and {\em Receiver} which
represent the actions to be executed by the sending node and
the receiving node respectively. Both the Sender and the
Receiver must run on the host {\em cis450.cis.udel.edu},
but they should be written in such a way that they could
conceivably be run on any two hosts, not necessarily the same.

\begin{verbatim}
    <----------------- 16 bits (2 bytes) ------------------>
    --------------------------------------------------------
    |              Count (no. of data bytes)               |
    --------------------------------------------------------
    |                Packet Sequence Number                |
    --------------------------------------------------------
    |            Data Bytes      |          ...            |
    --------------------------------------------------------
\end{verbatim}

The second field of the header is called the
packet sequence number. Each
packet transmitted by the Sender is assigned
a sequence number that alternates between 0 and 1,
in accordance with the Stop-and-Wait protocol.


Output of your program

At specific places in both your Sender and Receiver programs, you must print 
out specific messages.
The symbol ‚Äún‚Äù below refers to the sequence number of the transmitted or receiv
0 or 1), and the symbol ‚Äúc‚Äù below refers to the count (number of data bytes) in
 the transmitted or
received packet.
The messages to be printed by the Sender are:
When a new data packet numbered n is sent by the Sender:
Packet n transmitted with c data bytes
When a data packet numbered n is retransmitted by the Sender:
Packet n retransmitted with c data bytes
When a timeout expires:
Timeout expired for packet numbered n
When an ACK is received with number n:
ACK n received
When the ‚ÄúEnd of Transmission‚Äù packet is sent:
End of Transmission Packet with sequence number n transmitted with c data bytes

\begin{center}
{\bf Testing}
\end{center}

The files {\em test1.txt} and {\em test2.txt} in the directory
{\em /usa/sethi/networks/proj1} on {\em cis450.cis.udel.edu}
are sample input files that may
be used by you to test your programs.
It is strongly suggested that you first use {\em test1.txt} for
all your testing, and only if you have thoroughly debugged your
programs, then proceed with using {\em test2.txt} for further testing.

It is also suggested that you test your programs in phases using
the following configuration parameter values:

\begin{itemize}
\item Packet and ACK loss rates 0, Timeout value $n$  = 5.
\item Packet loss rate 0.2, ACK loss rate 0, Timeout value
$n$ = 5.
\item Packet loss rate 0, ACK loss rate 0.2, Timeout value
$n$ = 5.
\item Packet and ACK loss rates 0, Timeout value $n$ = 3.
\end{itemize}

]0;szosy@n541la: ~/dev/NetworksP2szosy@n541la:~/dev/NetworksP2$ exit

Script done on Wed 03 May 2017 05:30:06 PM EDT
